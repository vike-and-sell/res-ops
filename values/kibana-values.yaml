elasticsearchHosts: "http://elasticsearch-master:9200"
# Remove the following as we are not using SSL
# elasticsearchCertificateSecret: elasticsearch-master-certs
# elasticsearchCertificateAuthoritiesFile: ca.crt
elasticsearchCredentialSecret: elasticsearch-master-credentials

replicas: 1

extraEnvs:
- name: "NODE_OPTIONS"
  value: "--max-old-space-size=1800"

envFrom: []

secretMounts: []

hostAliases: []

image: "docker.elastic.co/kibana/kibana"
imageTag: "8.5.1"
imagePullPolicy: "IfNotPresent"

labels: {}

annotations: {}

podAnnotations: {}

resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

protocol: http

serverHost: "0.0.0.0"

healthCheckPath: "/app/kibana"

kibanaConfig:
  kibana.yml: |
    elasticsearch.hosts: ["http://elasticsearch-master:9200"]
    elasticsearch.username: "elastic"
    elasticsearch.password: "3lastic.Pass"

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000

serviceAccount: ""

automountToken: true

priorityClassName: ""

httpPort: 5601

extraVolumes: []

extraVolumeMounts: []

extraContainers: []

extraInitContainers: []

updateStrategy:
  type: "Recreate"

service:
  type: NodePort
  loadBalancerIP: ""
  port: 5601
  nodePort: 32000 # You can set this to a specific port, or leave it empty to let Kubernetes choose
  labels: {}
  annotations: {}
  loadBalancerSourceRanges: []
  httpPortName: http

ingress:
  enabled: false

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 3
  timeoutSeconds: 5

imagePullSecrets: []
nodeSelector: {}
tolerations: []
affinity: {}

nameOverride: ""
fullnameOverride: ""

lifecycle: {}
